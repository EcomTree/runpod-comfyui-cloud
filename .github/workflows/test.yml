name: Tests

on:
  push:
    branches: [ main, develop, cursor/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          pytest tests/ -v --tb=short
      
      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=scripts --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
      
      - name: Check code formatting with black
        run: |
          black --check scripts/ tests/
        continue-on-error: true
      
      - name: Check import sorting with isort
        run: |
          isort --check-only scripts/ tests/
        continue-on-error: true
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 scripts/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 scripts/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        continue-on-error: true

  validate-config:
    name: Validate Configuration Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Validate models_download.json
        run: |
          python -c "import json; json.load(open('models_download.json'))"
      
      - name: Validate custom_nodes.json
        run: |
          python -c "import json; json.load(open('configs/custom_nodes.json'))"
      
      - name: Check for HTTP URLs in models_download.json
        run: |
          if grep -q '"http://' models_download.json; then
            echo "ERROR: Found HTTP URLs in models_download.json (should use HTTPS)"
            exit 1
          fi
      
      - name: Verify all scripts are executable
        run: |
          for script in scripts/*.sh; do
            if [ ! -x "$script" ]; then
              echo "ERROR: $script is not executable"
              exit 1
            fi
          done

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: comfyui-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image structure
        run: |
          docker build -t comfyui-test:latest .
          docker run --rm comfyui-test:latest ls -la /workspace || true
          docker run --rm comfyui-test:latest python3 --version

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
